function [ Output ] = SteamCycle( T_max, T_min, P_max, FH, RH )
%Steam Cycle
%   Input Arguments: 
%   - Max Steam Pressure [bar]
%   - Max Temperature [°C]
%   - Number of Feed Heaters [min value is 0]
%   - Reheating on or off
%   =======================================================================

%%
switch RH
    case 'off' 
        r = 0;
        if FH == 0
            Output = RankineHirn(T_max, T_min, P_max);
        elseif FH > 0
            Output = BasicFeedHeating(T_max, T_min, P_max, FH, r);
        else
            warning('Negative number of feedheaters not allowed')
        end
    case 'on'
        r = 1;
        if FH == 0
            Output = BasicReHeating(T_max, T_min, P_max);
        elseif FH > 0
            Output = ReHeatingAndFH(T_max, T_min, P_max, FH, r);
        else
            warning('Negative number of feedheaters not allowed')
            Output = 0;
        end
    otherwise
        warning('Unexpected reheating entry.')
        Output = 0;
end

%%
function [ Rankine ] = RankineHirn( t_max, t_min, p_max )
% Rankine-Hirn: Simple Rankine-Hirn cycle.
%   Input Arguments: 
%   - Temperature at point 3 [°C]
%   - Pressure at point 3 [bar]
%   =======================================================================

n = 6;                         % number of states
state = State_creation(n,6,0); % Creation of the structure

ind2i  = 3;
ind2ii = 4;
ind3   = 5;
ind4   = 6;
eta_FWP = 0.85; % Efficiency feedwater pump
eta_SiT = 0.88; % Isentropic Efficiency turbine
kpdgen  = 0.90; % Pressure drop coefficient at steam generator. Determined via numerical examples in book

% Point 3
state{ind3}.t = t_max;
state{ind3}.p = p_max;
state{ind3}.h = XSteam('h_pT',state{ind3}.p,state{ind3}.t);
state{ind3}.s = XSteam('s_pT',state{ind3}.p,state{ind3}.t);
state{ind3}.e = Exergy(state{ind3}.h,state{ind3}.s);

% Point 4 exit turbine
state{ind4}.p = XSteam('psat_T',t_min);
state{ind4} = turbine(state{ind3},state{ind4},eta_SiT);

% Point 1
state{1}.t = state{ind4}.t; %A rafiner peut-etre
state{1}.p = state{ind4}.p;
state{1}.x = 0;
state{1}.h = XSteam('hL_T',state{1}.t);
state{1}.s = XSteam('sL_t',state{1}.t);
state{1}.e = Exergy(state{1}.h,state{1}.s);

% Point 2 exit FWPump
state{2}.p = state{ind3}.p/kpdgen;
state{2} = pump(state{1},state{2},eta_FWP);

% Point 2'
state{ind2i}.p = state{ind3}.p;
state{ind2i}.t = XSteam('Tsat_p',state{ind2i}.p);
state{ind2i}.x = 0;
state{ind2i}.h = XSteam('hL_p',state{ind2i}.p);
state{ind2i}.s = XSteam('sL_p',state{ind2i}.p);
state{ind2i}.e = Exergy(state{ind2i}.h,state{ind2i}.s);

% Point 2''
state{ind2ii}.p = state{ind3}.p;
state{ind2ii}.t = XSteam('Tsat_p',state{ind2ii}.p);
state{ind2ii}.x = 1;
state{ind2ii}.h = XSteam('hV_p',state{ind2ii}.p);
state{ind2ii}.s = XSteam('sV_p',state{ind2ii}.p);
state{ind2ii}.e = Exergy(state{ind2ii}.h,state{ind2ii}.s);

Rankine = state;
end

%% 
function [ BFH ] =  BasicFeedHeating( t_max, t_min, p_max, fh , rh_param)
% Cycle with feedheaters but no reheating
%   Input Arguments: 
%   - Temperature at point 3 [°C]
%   - Pressure at point 3 [bar]
%   - Number of Feedheaters
%   =======================================================================

alpha = 10;                %Number of fixed points of the schematic
beta  = 4;                 %Number of points per state: eg: beta = 3 means 4.1 6.1 7.1 or 4.2 6.2 7.2 
                           %It's in case we need to add one to take
                           %something more into account. eg before and
                           %after isenthalpic valves
gamma    = 4;              %Param for bache calculation
p_bache  = 4.6;            %Param fixing the bache pressure
eta_FWP  = 0.85;           %Efficiency feedwater pump
eta_BP   = 0.85;           %Efficiency of the Bache Pump
eta_CP   = 0.85;           %Efficiency Condenser Pump
kpdgen   = 0.90;           %Pressure drop coefficient at steam generator. 
                           %Determined via numerical examples in book
ind1   = 1;
ind2   = 2;
ind2i  = 3;
ind2ii = 4;
ind3   = 5;
ind4   = 6;
ind5   = 7;
ind6   = 8;
ind7   = 9;
ind8   = 10;

n = alpha + beta * fh;
state = State_creation(n,alpha,beta); %Creation of the structure

base = RankineHirn(t_max,t_min,p_max);
state{ind2i}  = base{ind2i};
state{ind2ii} = base{ind2ii};
state{ind3}   = base{ind3};
state{ind4}   = base{ind4};
state{ind5}   = base{ind1};
state{ind5}.States = '5';


% Les Points 4i
for i = 1:fh
    ind4i = alpha + beta*(i-1) + 1;
    state{ind4i}.h = state{ind4}.h + (state{ind3}.h - state{ind4}.h)*i / (fh + 1);
    state{ind4i}.s = state{ind3}.s + (state{ind4}.s - state{ind3}.s)*(fh + 1 - i) / (fh + 1);
    state{ind4i}.t = XSteam('T_hs',state{ind4i}.h,state{ind4i}.s);
    state{ind4i}.p = XSteam('p_hs',state{ind4i}.h,state{ind4i}.s);
    state{ind4i}.e = Exergy(state{ind4i}.h,state{ind4i}.s);
    if state{ind4i}.h < XSteam('hV_T',state{ind4i}.t)
        state{ind4i}.x = XSteam('x_ph',state{ind4i}.p,state{ind4i}.h);
    end
end

% Point 1 entry FWPump
if rh_param == 1;                            %If used for RH Cycle, FWP entry Temp depends on exit pressure HP Turbine
    p_4HP = p_max / kpdgen;                  %Pressure exit HP Turbine if RH Cycle
    state{ind1}.t = XSteam('Tsat_p',p_4HP);  %Considering the desuperheaters we decided to fix 
                                             %this temp at the sat temp of the HP Turbine Bleed
                                             %in approximation to what we saw in the book.
    state{ind1}.p = XSteam('psat_T',state{ind1}.t) + 10;        %FWPump entry pressure above saturation pressure.
    state{ind1}.h = XSteam('h_pT',state{ind1}.p,state{ind1}.t);
    state{ind1}.s = XSteam('s_pT',state{ind1}.p,state{ind1}.t);
    state{ind1}.e = Exergy(state{ind1}.h,state{ind1}.s);
else
    state{ind1}.t = XSteam('Tsat_p',state{n-beta+1}.p) - 5;     %FWPump entry temp is sat temp of last bleed - 5°C.
    state{ind1}.p = XSteam('psat_T',state{ind1}.t) + 2;        %FWPump entry pressure above saturation pressure.
    state{ind1}.h = XSteam('h_pT',state{ind1}.p,state{ind1}.t);
    state{ind1}.s = XSteam('s_pT',state{ind1}.p,state{ind1}.t);
    state{ind1}.e = Exergy(state{ind1}.h,state{ind1}.s);
end

% Point 2 exit FWPump
state{ind2}.p = state{ind3}.p/kpdgen;
state{ind2} = pump(state{ind1},state{ind2},eta_FWP);


position_bache = 1;               %References the roman number of the schematic
index_bleed_bache = alpha + 1;    %Index of the bleed entering the bache at higher pressure
if fh > gamma                     %Finding the bache if the number of bleeds is higher than gamma
    
    while state{index_bleed_bache}.p < 4.6
        position_bache = position_bache + 1;
        index_bleed_bache = index_bleed_bache + beta;
    end
    index_exit_bache = alpha + beta*position_bache; %References the exit of the bache 
    
    for i = 1:fh
        ind7i = alpha + beta*i - 1;
        ind8i = alpha + beta*i;
        ind_bleed = alpha + beta*(i-1) + 1;
        
        if i == position_bache
            % Bache exit conditions point 8.bache = 7.bache because no valve
            state{index_exit_bache}.p = p_bache;          % Fixed pressure inside the bache
            state{index_exit_bache}.t = XSteam('Tsat_p',state{index_exit_bache}.p);
            state{index_exit_bache}.h = XSteam('hL_p',state{index_exit_bache}.p);
            state{index_exit_bache}.s = XSteam('sL_p',state{index_exit_bache}.p);
            state{index_exit_bache}.x = 0;
            state{index_exit_bache}.e = Exergy(state{index_exit_bache}.h,state{index_exit_bache}.s);
            
            str                              = state{index_exit_bache-1}.States;
            state{index_exit_bache-1}        = state{index_exit_bache};
            state{index_exit_bache-1}.States = str;            
            
        else
            % Points 7.i exit of the bleed condensors before valves
            state{ind7i}.p = state{ind_bleed}.p;
            state{ind7i}.t = XSteam('Tsat_p',state{ind7i}.p);
            state{ind7i}.x = 0;
            state{ind7i}.h = XSteam('hL_p',state{ind7i}.p);
            state{ind7i}.s = XSteam('sL_p',state{ind7i}.p);
            state{ind7i}.e = Exergy(state{ind7i}.h,state{ind7i}.s);
             
            % Points 8.i exit of isenthalpic valves of the bleed condensors
            state{ind8i}.p = state{ind_bleed - beta}.p;
            state{ind8i}.t = state{ind7i}.t;
            state{ind8i}.h = state{ind7i}.h;
            state{ind8i}.x = XSteam('x_ph',state{ind8i}.p,state{ind8i}.h);
            state{ind8i}.s = XSteam('s_ph',state{ind8i}.p,state{ind8i}.h);
            state{ind8i}.e = Exergy(state{ind8i}.h,state{ind8i}.s);
        end        
    end
    
    % Point 6.0 (exit Condensor Pump)
    state{ind6}.p = state{index_exit_bache}.p;
    state{ind6} = pump(state{ind5},state{ind6},eta_CP);
    
    % Points 6.i FW circuit except the first one at this stage
    for i = 2:fh
        ind6i = alpha + beta*i - 2;
        ind7i = alpha + beta*(i - 1) - 1;  % point 7.(i-1)
        
        if i <= position_bache              % Points 6.i before bache
            state{ind6i}.p = state{ind6}.p;
            state{ind6i}.t = state{ind7i}.t - 5;
            state{ind6i}.h = XSteam('h_pT',state{ind6i}.p,state{ind6i}.t);
            state{ind6i}.s = XSteam('s_pT',state{ind6i}.p,state{ind6i}.t);
            state{ind6i}.e = Exergy(state{ind6i}.h,state{ind6i}.s);
        elseif (i == position_bache + 1)   % Point 6 behind Bache Pump
            state{ind6i}.p = state{ind1}.p;
            state{ind6i} = pump(state{ind7i},state{ind6i},eta_BP);
        else                               % Points 6.i behind the bache pump
            state{ind6i}.p = state{ind1}.p;
            state{ind6i}.t = state{ind7i}.t - 5;
            state{ind6i}.h = XSteam('h_pT',state{ind6i}.p,state{ind6i}.t);
            state{ind6i}.s = XSteam('s_pT',state{ind6i}.p,state{ind6i}.t);
            state{ind6i}.e = Exergy(state{ind6i}.h,state{ind6i}.s);
        end
    end
    
else  %Without bache
    for i = 1:fh
        ind7i = alpha + beta*i - 1;
        ind8i = alpha + beta*i;
        ind_bleed = alpha + beta*(i-1) + 1;

        % Points 7.i exit of the bleed condensors before valves
        state{ind7i}.p = state{ind_bleed}.p;
        state{ind7i}.t = XSteam('Tsat_p',state{ind7i}.p);
        state{ind7i}.x = 0;
        state{ind7i}.h = XSteam('hL_p',state{ind7i}.p);
        state{ind7i}.s = XSteam('sL_p',state{ind7i}.p);
        state{ind7i}.e = Exergy(state{ind7i}.h,state{ind7i}.s);


        % Points 8.i exit of isenthalpic valves of the bleed condensors
        state{ind8i}.p = state{ind_bleed - beta}.p;
        state{ind8i}.t = state{ind7i}.t;
        state{ind8i}.h = state{ind7i}.h;
        state{ind8i}.x = XSteam('x_ph',state{ind8i}.p,state{ind8i}.h);
        state{ind8i}.s = XSteam('s_ph',state{ind8i}.p,state{ind8i}.h);
        state{ind8i}.e = Exergy(state{ind8i}.h,state{ind8i}.s);
    end
            
    % Point 6.0 (exit Condensor Pump) 
    state{ind6}.p = state{ind1}.p;
    state{ind6} = pump(state{ind5},state{ind6},eta_CP);
    
    % Points 6.i FW circuit except the first one at this stage
    for i = 2:fh
        ind6i = alpha + beta*i - 2;
        ind7i = alpha + beta*(i - 1) - 1;  % point 7.(i-1)
        
        state{ind6i}.p = state{ind6}.p;
        state{ind6i}.t = state{ind7i}.t - 5;
        state{ind6i}.h = XSteam('h_pT',state{ind6i}.p,state{ind6i}.t);
        state{ind6i}.s = XSteam('s_pT',state{ind6i}.p,state{ind6i}.t);
        state{ind6i}.e = Exergy(state{ind6i}.h,state{ind6i}.s);
    end
    
end

% Point 7 exit Sub-Cooler
state{ind7}.t = state{ind6}.t + 5;
state{ind7}.p = state{(alpha + beta - 1)}.p;
state{ind7}.h = XSteam('h_pT',state{ind7}.p,state{ind7}.t);
state{ind7}.s = XSteam('s_pT',state{ind7}.p,state{ind7}.t);
state{ind7}.e = Exergy(state{ind7}.h,state{ind7}.s);

% Point 8 global bleedwater at entrance condensor
state{ind8}.p = state{ind4}.p;
state{ind8}.t = state{ind7}.t;
state{ind8}.h = state{ind7}.h;
state{ind8}.x = XSteam('x_ph',state{ind8}.p,state{ind8}.h);
state{ind8}.s = XSteam('s_ph',state{ind8}.p,state{ind8}.h);
state{ind8}.e = Exergy(state{ind8}.h,state{ind8}.s);


BFH = state;
end

%%
function [ RHNoFH ] = ReHeatingNoFH( t_max, t_min, hp )
  
ind1    = 1;
ind2    = 2;
ind2i   = 3;
ind2ii  = 4;
ind3HP  = 5;
ind4HP  = 6;
ind3LP  = 7;
ind4LP  = 8;

p_3LP     = 0.14*hp;
kpdgen    = 0.90;
eta_SiTHP = 0.90; % Isentropic Efficiency HP Turbine
eta_SiTLP = 0.88; % Isentropic Efficiency LP Turbine
eta_FWP   = 0.85;

n = 8;
state = State_creation(n,n,0);

% Point 3HP
state{ind3HP}.p = hp;
state{ind3HP}.t = t_max;
state{ind3HP}.h = XSteam('h_pT',state{ind3HP}.p,state{ind3HP}.t);
state{ind3HP}.s = XSteam('s_pT',state{ind3HP}.p,state{ind3HP}.t);
state{ind3HP}.e = Exergy(state{ind3HP}.h,state{ind3HP}.s);

% Point 4HP
state{ind4HP}.p = p_3LP / kpdgen;
state{ind4HP} = turbine(state{ind3HP},state{ind4HP},eta_SiTHP);

% Point 3LP
state{ind3LP}.p = p_3LP;
state{ind3LP}.t = t_max;
state{ind3LP}.h = XSteam('h_pT',state{ind3LP}.p,state{ind3LP}.t);
state{ind3LP}.s = XSteam('s_pT',state{ind3LP}.p,state{ind3LP}.t);
state{ind3LP}.e = Exergy(state{ind3LP}.h,state{ind3LP}.s);

% Point 4LP
state{ind4LP}.p = XSteam('Psat_T',t_min);
state{ind4LP} = turbine(state{ind3LP},state{ind4LP},eta_SiTLP);

% Point 1
state{ind1}.t = state{ind4LP}.t;
state{ind1}.p = state{ind4LP}.p;
state{ind1}.x = 0;
state{ind1}.h = XSteam('hL_T',state{ind1}.t);
state{ind1}.s = XSteam('sL_t',state{ind1}.t);
state{ind1}.e = Exergy(state{ind1}.h,state{ind1}.s);

% Point 2 exit FWPump
state{ind2}.p = state{ind3HP}.p/kpdgen;
state{ind2} = pump(state{ind1},state{ind2},eta_FWP);

% Point 2'
state{ind2i}.p = state{ind3HP}.p;
state{ind2i}.t = XSteam('Tsat_p',state{ind2i}.p);
state{ind2i}.x = 0;
state{ind2i}.h = XSteam('hL_p',state{ind2i}.p);
state{ind2i}.s = XSteam('sL_p',state{ind2i}.p);
state{ind2i}.e = Exergy(state{ind2i}.h,state{ind2i}.s);

% Point 2''
state{ind2ii}.p = state{ind3HP}.p;
state{ind2ii}.t = XSteam('Tsat_p',state{ind2ii}.p);
state{ind2ii}.x = 1;
state{ind2ii}.h = XSteam('hV_p',state{ind2ii}.p);
state{ind2ii}.s = XSteam('sV_p',state{ind2ii}.p);
state{ind2ii}.e = Exergy(state{ind2ii}.h,state{ind2ii}.s);

RHNoFH = state;
end

%%
function [ RHandFH ] = ReHeatingAndFH( t_max, t_min, hp, fh, rh_param )
alpha = 12;                %Number of fixed points of the schematic
beta  = 4;                 %Number of points per state: eg: beta = 3 means 4.1 6.1 7.1 or 4.2 6.2 7.2 
                           %It's in case we need to add one to take
                           %something more into account. eg before and
                           %after isenthalpic valves
alpha_FH_base = 10;        %Fixed points in simple FH function to get the indexes in the FH_base
gamma     = 4;             %Param for bache calculation
p_3LP     = 0.14*hp;      %Pressure exit HP turbine
p_bache   = 4.6;           %Param fixing the bache pressure
eta_SiTHP = 0.90;          %Isentropic Efficiency HP Turbine
eta_SiTLP = 0.88;          %Isentropic Efficiency LP Turbine
eta_FWP   = 0.85;          %Efficiency feedwater pump
eta_BP    = 0.85;          %Efficiency of the Bache Pump
eta_CP    = 0.85;          %Efficiency Condenser Pump
kpdgen    = 0.90;          %Pressure drop coefficient at steam generator. 
                           %Determined via numerical examples in book
ind1    = 1;
ind2    = 2;
ind2i   = 3;
ind2ii  = 4;
ind3HP  = 5;
ind4HP  = 6;
ind3LP  = 7;
ind4LP  = 8;
ind5    = 9;
ind6    = 10;
ind7    = 11;
ind8    = 12;

n = alpha + beta * fh + 4;            % + 4 because we consider the HP bleed outside of the LP bleeds. 
state = State_creation(n,alpha,beta); %Creation of the structure

% Base Points of the ReHeating Cycle
RH_base = ReHeatingNoFH(t_max,t_min,hp);
state{ind2i}  = RH_base{ind2i};
state{ind2ii} = RH_base{ind2ii};
state{ind3HP} = RH_base{ind3HP};
state{ind4HP} = RH_base{ind4HP};
state{ind3LP} = RH_base{ind3LP};
state{ind4LP} = RH_base{ind4LP};

% Points of the Feed Heating Cycle
FH_base = BasicFeedHeating(t_max,t_min,state{ind3LP}.p,fh,rh_param);
state{ind1} = FH_base{ind1};
state{ind2}.p = hp / kpdgen;
state{ind2} = pump(state{ind1},state{ind2},eta_FWP);

state{ind5} = FH_base{ind5-2};
state{ind6} = FH_base{ind6-2};
state{ind7} = FH_base{ind7-2};
state{ind8} = FH_base{ind8-2};

for i = 1:fh
    % Points 4.i
    ind4i = alpha + beta*(i-1) + 1;
    ind4i_base = alpha_FH_base + beta*(i-1) + 1;
    state{ind4i} = FH_base{ind4i_base};
    
    % Points 6.i
    ind6i = alpha + beta*(i-1) + 2;
    ind6i_base = alpha_FH_base + beta*(i-1) + 2;
    state{ind6i} = FH_base{ind6i_base};
    
    % Points 7.i 
    ind7i = alpha + beta*(i-1) + 3;
    ind7i_base = alpha_FH_base + beta*(i-1) + 3;
    state{ind7i} = FH_base{ind7i_base};
    
    % Points 8.i
    ind8i = alpha + beta*(i-1) + 4;
    ind8i_base = alpha_FH_base + beta*(i-1) + 4;
    state{ind8i} = FH_base{ind8i_base};
end

% Points around the HP Bleed
% Point 4HP 
state{n - beta + 1} = state{ind4HP};

% Point 7HP
state{n - beta + 3}.p = state{n - beta + 1}.p;
state{n - beta + 3}.t = XSteam('Tsat_p',state{n - beta + 3}.p);
state{n - beta + 3}.x = 0;
state{n - beta + 3}.h = XSteam('hL_p',state{n - beta + 3}.p);
state{n - beta + 3}.s = XSteam('sL_p',state{n - beta + 3}.p);
state{n - beta + 3}.e = Exergy(state{n - beta + 3}.h,state{n - beta + 3}.s);

% Point 8HP
state{n - beta + 4}.p = state{n - 2*beta + 1}.p;
state{n - beta + 4}.t = state{n - beta + 3}.t;
state{n - beta + 4}.h = state{n - beta + 3}.h;
state{n - beta + 4}.x = XSteam('x_ph',state{n - beta + 4}.p,state{n - beta + 4}.h);
state{n - beta + 4}.s = XSteam('s_ph',state{n - beta + 4}.p,state{n - beta + 4}.h);
state{n - beta + 4}.e = Exergy(state{n - beta + 4}.h,state{n - beta + 4}.s);
      
%             state{ind6i}.p = state{ind1}.p;
%             state{ind6i}.t = state{ind7i}.t - 5;
%             state{ind6i}.h = XSteam('h_pT',state{ind6i}.p,state{ind6i}.t);
%             state{ind6i}.s = XSteam('s_pT',state{ind6i}.p,state{ind6i}.t);
%             state{ind6i}.e = Exergy(state{ind6i}.h,state{ind6i}.s);



%     
%     % Point 6.0 (exit Condensor Pump)
%     state{ind6}.p = state{index_exit_bache}.p;
%     state{ind6} = pump(state{ind5},state{ind6},eta_CP);
%     
%     % Points 6.i FW circuit except the first one at this stage
%     for i = 2:fh
%         ind6i = alpha + beta*i - 2;
%         ind7i = alpha + beta*(i - 1) - 1;  % point 7.(i-1)
%         
%         if i <= position_bache              % Points 6.i before bache
%             state{ind6i}.p = state{ind6}.p;
%             state{ind6i}.t = state{ind7i}.t - 5;
%             state{ind6i}.h = XSteam('h_pT',state{ind6i}.p,state{ind6i}.t);
%             state{ind6i}.s = XSteam('s_pT',state{ind6i}.p,state{ind6i}.t);
%             state{ind6i}.e = Exergy(state{ind6i}.h,state{ind6i}.s);
%         elseif (i == position_bache + 1)   % Point 6 behind Bache Pump
%             state{ind6i}.p = state{ind1}.p;
%             state{ind6i} = pump(state{ind7i},state{ind6i},eta_BP);
%         else                               % Points 6.i behind the bache pump

%         end
%     end
%     
% else  %Without bache
%     for i = 1:fh
%         ind7i = alpha + beta*i - 1;
%         ind8i = alpha + beta*i;
%         ind_bleed = alpha + beta*(i-1) + 1;
% 
%         % Points 7.i exit of the bleed condensors before valves
%         state{ind7i}.p = state{ind_bleed}.p;
%         state{ind7i}.t = XSteam('Tsat_p',state{ind7i}.p);
%         state{ind7i}.x = 0;
%         state{ind7i}.h = XSteam('hL_p',state{ind7i}.p);
%         state{ind7i}.s = XSteam('sL_p',state{ind7i}.p);
%         state{ind7i}.e = Exergy(state{ind7i}.h,state{ind7i}.s);
% 
% 
%         % Points 8.i exit of isenthalpic valves of the bleed condensors
%         state{ind8i}.p = state{ind_bleed - beta}.p;
%         state{ind8i}.t = state{ind7i}.t;
%         state{ind8i}.h = state{ind7i}.h;
%         state{ind8i}.x = XSteam('x_ph',state{ind8i}.p,state{ind8i}.h);
%         state{ind8i}.s = XSteam('s_ph',state{ind8i}.p,state{ind8i}.h);
%         state{ind8i}.e = Exergy(state{ind8i}.h,state{ind8i}.s);
%     end
%             
%     % Point 6.0 (exit Condensor Pump) 
%     state{ind6}.p = state{ind1}.p;
%     state{ind6} = pump(state{ind5},state{ind6},eta_CP);
%     
%     % Points 6.i FW circuit except the first one at this stage
%     for i = 2:fh
%         ind6i = alpha + beta*i - 2;
%         ind7i = alpha + beta*(i - 1) - 1;  % point 7.(i-1)
%         
%         state{ind6i}.p = state{ind6}.p;
%         state{ind6i}.t = state{ind7i}.t - 5;
%         state{ind6i}.h = XSteam('h_pT',state{ind6i}.p,state{ind6i}.t);
%         state{ind6i}.s = XSteam('s_pT',state{ind6i}.p,state{ind6i}.t);
%         state{ind6i}.e = Exergy(state{ind6i}.h,state{ind6i}.s);
%     end
%     
% end
% 
% % Point 7 exit Sub-Cooler
% state{ind7}.t = state{ind6}.t + 5;
% state{ind7}.p = state{(alpha + beta - 1)}.p;
% state{ind7}.h = XSteam('h_pT',state{ind7}.p,state{ind7}.t);
% state{ind7}.s = XSteam('s_pT',state{ind7}.p,state{ind7}.t);
% state{ind7}.e = Exergy(state{ind7}.h,state{ind7}.s);
% 
% % Point 8 global bleedwater at entrance condensor
% state{ind8}.p = state{ind4}.p;
% state{ind8}.t = state{ind7}.t;
% state{ind8}.h = state{ind7}.h;
% state{ind8}.x = XSteam('x_ph',state{ind8}.p,state{ind8}.h);
% state{ind8}.s = XSteam('s_ph',state{ind8}.p,state{ind8}.h);
% state{ind8}.e = Exergy(state{ind8}.h,state{ind8}.s);



RHandFH = state;
end

%%
function ex = Exergy (h,s)
    t0 = 273.15 + 15; %[K]
    p0 = 0.01704;
    h0 = 63.0;
    s0 = 0.224;
    ex = h - h0 - t0*(s - s0);
end

function muT = muT(t)
% Function to extrapolate the value of muT [kJ/kg bar] of water at different temperatures
% using values of the LMECA1855 exercice book at 30 bar. Pressure has not a
% big effect on muT.
% Input Variables:
%   - Temperature of the water. Max temp = 230 °C
% =========================================================================
    if t > 230
        warning('Max value of temperature exceded. T_max = 230. muT approximated to its value at 230 °C!');
        muT = 0.01871;
    else
        T   = [0.02 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230];
        MuT = [0.10140 0.09720 0.09385 0.09101 0.08847 0.08614 0.08392 0.08175 ...
               0.07960 0.07743 0.07520 0.07288 0.07044 0.06784 0.06504 0.06300 ...
               0.05865 0.05494 0.05079 0.04610 0.04073 0.03454 0.02730 0.01871];

        ind = 1;
        while t > T(ind) %ind will be the index of the closest higher temp of the test temp. 
            ind = ind + 1;
        end
        muT = (MuT(ind) - MuT(ind-1)) * (t - T(ind-1)) / 10 + MuT(ind-1);
    end
end

function Output = pump(state_in,state_out,eta)
% Function calculating the output state of a pump.
% Input Variables:
%   - State at entrance of the pump
%   - Desired exit pressure
%   - Efficiency of the pump
% =========================================================================
    
    v_LH2O   = 0.001005; %[m³/kg] volume massique de l'eau

    state_out.h = v_LH2O * (state_out.p - state_in.p)*100 / eta + state_in.h; % *e2 pour obtenir kJ/kg (si e5 on obtient des joules..)
    muT            = muT(state_in.t);                                           % muT approx with temp before pump
    cp2            = (XSteam('Cp_pT',state_out.p,state_in.t) + XSteam('CpL_p',state_in.p)) / 2; 
    state_out.t = state_in.t + (v_LH2O*100 - muT)*(state_out.p - state_in.p)/ (cp2);
    state_out.s = XSteam ('s_pT',state_out.p,state_out.t);
    state_out.e = Exergy(state_out.h,state_out.s);

    Output = state_out;
end

function Output = turbine (state_in,state_out,eta)
% Function calculating the output state of a turbine.
% Input Variables:
%   - State at entrance of the turbine. Defines entry entropy and enthalpy
%   - State at exit turbine. Defines exit pressure
%   - Isentropic efficiency of the turbine
% =========================================================================

    h_isos  = XSteam('h_ps',state_out.p,state_in.s);    
    state_out.h = eta*(h_isos - state_in.h) + state_in.h;   
    state_out.s = XSteam('s_ph',state_out.p,state_out.h);   
    state_out.t = XSteam('T_ph',state_out.p,state_out.h);
    state_out.e = Exergy(state_out.h,state_out.s);

    if state_out.t == XSteam('Tsat_p',state_out.p);
        state_out.x = XSteam('x_ph',state_out.p,state_out.h);
    else
        state_out.x = NaN;
    end

    Output =  state_out;
end

end
